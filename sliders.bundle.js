webpackJsonp([4],{1031:function(e,n,t){var a=t(580);"string"==typeof a&&(a=[[e.i,a,""]]);t(36)(a,{});a.locals&&(e.exports=a.locals)},1045:function(e,n,t){e.exports=t(362)},229:function(e,n,t){"use strict";function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function i(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function r(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}var o=t(1031),s=(t.n(o),t(4)),l=t.n(s),c=t(230),d=t(138),u=t.n(d),p=t(146),m=(t.n(p),t(819)),h=t.n(m);t.d(n,"a",function(){return g});var f=function(){function e(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(n,t,a){return t&&e(n.prototype,t),a&&e(n,a),n}}(),g=function(e){function n(){return a(this,n),i(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return r(n,e),f(n,[{key:"render",value:function(){return l.a.createElement("div",{className:"sliders-scene"},l.a.createElement("div",{className:"description"},l.a.createElement("h2",null,"Example #3 - Sliders"),"This example demonstrates side effects through sagas.",l.a.createElement("br",null),l.a.createElement("br",null),"You will see one component with two instances that dynamically receive separate props. Each instance has its own saga that indepentenly updates the image after a delay.",l.a.createElement("br",null),l.a.createElement("br",null),"Read the documentation for ",l.a.createElement("a",{href:"https://redux-saga.js.org/"},"redux-saga")," to fully understand this example.",l.a.createElement("h2",null,"Final result"),l.a.createElement("div",{className:"demo"},l.a.createElement("div",{className:"slider-container"},l.a.createElement(c.a,{id:1,initialSlide:0}),l.a.createElement(c.a,{id:2,initialSlide:1})))),l.a.createElement("div",{className:"code"},l.a.createElement("h2",null,"Full source"),"Better documentation is coming soon. Until then, read the comments in the code and the ",l.a.createElement("a",{href:"https://redux-saga.js.org/"},"redux-saga")," documentation.",l.a.createElement(u.a,{className:"javascript"},h.a)))}}]),n}(s.Component)},362:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(23),i=(t.n(a),t(229));n.default=t.i(a.createScene)({name:"sliders",component:i.a})},381:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(23),i=(t.n(a),t(229));n.default=t.i(a.createScene)({name:"sliders",component:i.a})},580:function(e,n,t){n=e.exports=t(32)(),n.push([e.i,".sliders-scene {\n  text-align: center;\n}\n.sliders-scene .slider-container {\n  max-width: 500px;\n  margin: 0 auto;\n}\n",""])},819:function(e,n){e.exports="// slider/index.js\nimport './styles.scss'\n\nimport React, { Component, PropTypes } from 'react'\nimport { kea } from 'kea'\n\nimport { take, race, put } from 'redux-saga/effects'\n\nimport delay from '~/utils/delay'\nimport range from '~/utils/range'\n\nimport images from './images'\n\n@kea({\n  key: (props) => props.id,\n\n  path: (key) => ['scenes', 'homepage', 'slider', key],\n\n  actions: () => ({\n    updateSlide: index => ({ index })\n  }),\n\n  reducers: ({ actions, key, props }) => ({\n    currentSlide: [props.initialSlide || 0, PropTypes.number, {\n      [actions.updateSlide]: (state, payload) => {\n        return payload.key === key ? payload.index % images.length : state\n      }\n    }]\n  }),\n\n  selectors: ({ selectors }) => ({\n    currentImage: [\n      () => [selectors.currentSlide],\n      (currentSlide) => images[currentSlide],\n      PropTypes.object\n    ]\n  }),\n\n  // This saga is run when the component is mounted.\n  // The function is a regular redux-saga worker that has access to:\n  // 1) this.actions, 2) this.key and 3) this.props\n  //\n  // Read the redux-saga documentation to understand the different\n  // functions like: race(), put(), take(), etc\n  start: function * () {\n    const { updateSlide } = this.actions\n\n    console.log('Starting homepage slider saga')\n    // console.log(this, this.actions, this.props)\n\n    while (true) {\n      // wait until the updateSlide() action is triggered or a 5sec timeout occurs\n      // to ignore actions from other slider instances we must also match the key\n      const { timeout } = yield race({\n        change: take(action => action.type === updateSlide.toString() &&\n                               action.payload.key === this.key),\n        timeout: delay(5000)\n      })\n\n      if (timeout) {\n        // use this.get(..) to select the latest data from redux\n        const currentSlide = yield this.get('currentSlide')\n\n        // actions are not automatically bound to dispatch, so\n        // you must use redux-saga's put() with them\n        yield put(updateSlide(currentSlide + 1))\n      }\n    }\n  },\n\n  // this saga is run when the component is unmounted\n  stop: function * () {\n    console.log('Stopping homepage slider saga')\n  },\n\n  // The redux-saga takeEvery function.\n  // It waits for actions and runs the relevant functions.\n  // Also available: takeLatest\n  takeEvery: ({ actions, workers }) => ({\n    [actions.updateSlide]: workers.updateSlide\n  }),\n\n  // it's recommended to group all the logic under the workers: {} object.\n  workers: {\n    updateSlide: function * (action) {\n      // check if it was this component that triggered the action\n      if (action.payload.key === this.key) {\n        console.log('slide update triggered', action.payload.key, this.key, this.props.id)\n        // console.log(action, this)\n      }\n    }\n  }\n})\nexport default class Slider extends Component {\n  render () {\n    const { currentSlide, currentImage } = this.props\n    const { updateSlide } = this.actions\n\n    const title = `Image copyright by ${currentImage.author}`\n\n    return (\n      <div className='kea-slider'>\n        <img src={currentImage.src} alt={title} title={title} />\n        <div className='buttons'>\n          {range(images.length).map(i => (\n            <span key={i}\n                  className={i === currentSlide ? 'selected' : ''}\n                  onClick={() => updateSlide(i)} />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n// index.js\nexport default class SlidersScene extends Component {\n  render () {\n    return (\n      <div className='slider-container'>\n        <Slider id={1} initialSlide={0} />\n        <Slider id={2} initialSlide={1} />\n      </div>\n    )\n  }\n}\n\n"}},[1045]);